- allow_desktop_signature ||= false
- allow_print_and_sign ||= false # only relevant if allow_desktop_signature is true
- home_state_key ||= @registrant.home_state_abbrev.downcase
- form_name_prefix = ActiveModel::Naming.param_key(@registrant) 
  
%fieldset#signature_upload
  %p.instructions 
    = I18n.t("states.custom.#{home_state_key}.signature_capture.#{allow_desktop_signature ? 'desktop_provide_e_signature' : 'desktop_provide_signature'}", default: t("txt.signature_capture.#{allow_desktop_signature ? 'desktop_provide_e_signature' : 'desktop_provide_signature'}", {state: @registrant.home_state_name})).html_safe
  - if form.object.errors[:voter_signature_image].any?
    %p.instructions
      %span.error
        = form.object.errors[:voter_signature_image].join("\n")
    
  %ul#signature_method.checkbox.signature-method
    %li
      = form.radio_button :signature_method, VoterSignature::UPLOAD_METHOD
      %label{for: "#{form_name_prefix}_signature_method_upload"}
        = I18n.t("states.custom.#{home_state_key}.signature_capture.upload_signature_image", default: t('txt.signature_capture.upload_signature_image'))
      #signature-cropper
        %br
        .select-image-btn.rollover_button
          %a
            %span.button-style 
              = I18n.t("states.custom.#{home_state_key}.signature_capture.buttons.select_file", default: t('txt.signature_capture.upload_signature_image'))
        
        %br
        %p.instructions
          
        .cropit-preview
        
        .controls{style: "display: none;"}
          %input{type: "range", class: "cropit-image-zoom-input"}
          %br
          %p.instructions
            = I18n.t("states.custom.#{home_state_key}.signature_capture.upload_file_zoom", default: t('txt.signature_capture.upload_file_zoom'))
          .remove-image-btn.rollover_button
            %a
              %span.button-style 
                = I18n.t("states.custom.#{home_state_key}.signature_capture.buttons.remove", default: t('txt.signature_capture.buttons.remove'))
        %input{type: "file", class: "cropit-image-input", style: "display: none;"}
        %br
        %br
      = form.hidden_field :voter_signature_image

    %li
      = form.radio_button :signature_method,  VoterSignature::DEVICE_METHOD
      %label{for: "#{form_name_prefix}_signature_method_device"} 
        = I18n.t("states.custom.#{home_state_key}.signature_capture.continue_on_device", default: t('txt.signature_capture.continue_on_device'))
      #continue_on_device
        %p.instructions{class: ('has_error' if form.object.errors[:sms_number_for_continue_on_device].present?) }
          = form.label :sms_number_for_continue_on_device #, "Text me the link:"
          = form.text_field :sms_number_for_continue_on_device, value: form.object.sms_number_for_continue_on_device
          - if form.object.errors[:sms_number_for_continue_on_device]
            .error
              = form.object.errors[:sms_number_for_continue_on_device].join("\n")
          
          = rollover_button(:next_step, I18n.t('txt.button.text_me', :id=>:sms_continue_on_device).html_safe, name: :sms_continue_on_device)  
        %p.instructions
          = form.label :email_address_for_continue_on_device #, "Email me the link:"            
          = form.text_field :email_address_for_continue_on_device, value: form.object.email_address_for_continue_on_device
          - if form.object.errors[:email_address_for_continue_on_device]
            .error
              = form.object.errors[:email_address_for_continue_on_device].join("\n")
          
          = rollover_button(:next_step, I18n.t('txt.button.email_me', :id=>:email_continue_on_device).html_safe, name: :email_continue_on_device)  
        %br
        %p.instructions
          = I18n.t("states.custom.#{home_state_key}.signature_capture.continue_via_copy", default: t('txt.signature_capture.continue_via_copy'))
          %span#link-to-copy
            = @registrant.signature_capture_url
          .rollover_button.button.copy-link
            %a
              %span.button-style 
                = I18n.t("states.custom.#{home_state_key}.signature_capture.buttons.copy_link", default: t('txt.signature_capture.buttons.copy_link'))
          #link-copied{style: "display: none; text-align: center; font-size: 20px; margin: 20px auto; color: green"}
            = I18n.t("states.custom.#{home_state_key}.signature_capture.link_copied", default: t('txt.signature_capture.link_copied'))
            
    - if allow_desktop_signature
      %li
        = form.radio_button :signature_method, VoterSignature::DESKTOP_METHOD
        %label{for: "#{form_name_prefix}_signature_method_desktop"} 
          = I18n.t("states.custom.#{home_state_key}.signature_capture.continue_on_desktop", default: t('txt.signature_capture.continue_on_desktop'))
      - if allow_print_and_sign
        %li
          = form.radio_button :signature_method, VoterSignature::PRINT_METHOD
          %label{for: "#{form_name_prefix}_signature_method_print"} 
            = I18n.t("states.custom.#{home_state_key}.signature_capture.continue_on_paper", default: t('txt.signature_capture.continue_on_paper'))
    - else
      %li
        = form.radio_button :signature_method, VoterSignature::PRINT_METHOD
        %label{for: "#{form_name_prefix}_signature_method_print"} 
          = I18n.t("states.custom.#{home_state_key}.signature_capture.continue_on_paper", default: t('txt.signature_capture.continue_on_paper'))
    
#signature_capture
  .rollover_button.capture-signature
    %a
      %span.button-style
        = t("states.custom.#{home_state_key}.signature_capture.buttons.provide_signature", default: t('txt.signature_capture.buttons.provide_signature'))
  %br
  %p.instructions{class: ('has_error' if form.object.errors[:voter_signature_image].present?) }
    = t("states.custom.#{home_state_key}.signature_capture.touch_sign_instructions", default: t('txt.signature_capture.touch_sign_instructions'))
  - if form.object.errors[:voter_signature_image]
    .error
      = form.object.errors[:voter_signature_image].join("\n")
  
  #signature_field_popup
    %canvas#signature_field
    .rollover_button.signature_done
      %a
        %span.button-style 
          = I18n.t("states.custom.#{home_state_key}.signature_capture.buttons.done", default: t('txt.signature_capture.buttons.done'))
    .signature_clear.button
      = I18n.t("states.custom.#{home_state_key}.signature_capture.buttons.reset", default: t('txt.signature_capture.buttons.reset'))
    .signature_capture_insructions
      %span= I18n.t("states.custom.#{home_state_key}.signature_capture.rotation_instructions", default: t('txt.signature_capture.rotation_instructions'))
      %span.cancel= I18n.t('txt.button.cancel')
      
  #signature_preview{ style: "display: #{@registrant.voter_signature_image.blank? ? 'none;' : 'block;'}"}
    %br
    %img.preview{src: @registrant.voter_signature_image}
    %br 
    %br
    .rollover_button.signature_clear
      %a
        %span.button-style 
          = I18n.t("states.custom.#{home_state_key}.signature_capture.buttons.remove", default: t('txt.signature_capture.buttons.remove'))
    %br 
    %br  
%br
%br
  